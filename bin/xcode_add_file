#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
# vim:filetype=ruby 

require 'pathname'
require 'xcodeproj'

class XcodeAddFile
  def initialize(project_path)
    @project_path = project_path
  end

  def XcodeAddFile.search_xcodeproj()
    project_paths = Dir.glob('**/*.xcodeproj')

    if project_paths.empty?
      return nil
    end

    if 1 == project_paths.count
      project_path = project_paths[0]
    elsif
      puts '*.xcodeproj more than one found.'
      project_paths.each {|path|
        puts path
      }
      puts ''
      print 'Select a xcodeproj: '
      project_path = gets.chomp
    end

    project_path
  end

  def save
    @project.save()
  end

  def add_file(file_path, target_name)
    @file_path = file_path
    @project = Xcodeproj::Project.open(@project_path)
    @target = search_target(target_name)
    if @target.nil?
      puts "Target is not found in #{project_path}"
      return
    end

    dirs = []
    dir_path = Pathname.new(file_path.dirname)
    dir_path.each_filename {|component|
      dirs << component
    }

    group, dirs = explore_groups(@project.main_group, dirs)
    file_ref = nil
    if dirs.empty?
      file_name = @file_path.basename.to_s
      file_ref = add_file_to_group(group, file_name)
    else
      p dirs
      puts 'not found'
      return
    end

    if file_ref.nil?
      puts "#{file_name} already exists."
      return
    end

    add_ref_to_target(@target, file_ref)
  end

  def search_target(target_name)
    targets = @project.targets
    if targets.empty?
      return
    end

    target = nil
    if 1 == targets.count
      target = targets[0]
    elsif
      puts 'Target more than one found.'
      targets.each {|t|
        puts t.display_name
      }
      puts ''
      print 'Select a Target: '
      target_name = gets.chomp
      targets.each {|t|
        if t.display_name == target_name
          target = t
        end
      }
    end
    target
  end

  def explore_groups(group, dirs)
    found = false
    group.groups.each {|g|
      if g.display_name == dirs[0]
        return explore_groups(g, dirs[1..-1])
      end
    }
    return [group, dirs]
  end

  def add_file_to_group(group, file_name)
    group.files.each {|ref|
      if ref.display_name == file_name
        return nil
      end
    }
    return group.new_reference(file_name)
  end

  def add_ref_to_target(target, file_ref)
    target.add_file_references([file_ref])
  end
end

file_path = nil
unless ARGV[0].nil?
  target_path = Pathname.new(ARGV[0])
  current_path = Pathname.new('.')
  file_path = target_path.relative_path_from(current_path)
end

if file_path.nil?
  puts 'filepath is not found'
  exit 1
end


target_name = nil
unless ARGV[1].nil?
  target_name = ARGV[1]
end

project_path = nil
unless ARGV[2].nil?
  project_path = ARGV[2]
end

if project_path.nil?
  project_path = XcodeAddFile.search_xcodeproj()
end

if project_path.nil?
  puts '*.xcpdeproj is not found'
  exit 1
end

controller = XcodeAddFile.new(project_path)
controller.add_file(file_path, target_name)
controller.save()
