# basic

[[plugins]]
repo = 'vim-scripts/autodate.vim'

[[plugins]]
repo = 'vim-scripts/surround.vim'

[[plugins]]
repo = 'kana/vim-fakeclip'

[[plugins]]
repo = 'vim-scripts/L9'

[[plugins]]
repo = 'kana/vim-altr'

[[plugins]]
repo = 'kana/vim-smartinput'
#{{{1
hook_add = '''
call smartinput#clear_rules()
call smartinput#define_rule({
  \ 'at': '{\%#',
  \ 'char': '<Enter>',
  \ 'input': '<Enter>}<Esc>O',
  \ 'filetype': ['c', 'cpp', 'objc', 'swift'],
  \ })
'''
#1}}}

[[plugins]]
repo = 'thinca/vim-tabrecent'
#{{{1
hook_add = '''
nnoremap  [MyPrefix]l   :<C-u>TabRecent<CR>
nnoremap  <Space><Space><Space> :<C-u>TabRecent<CR>
'''
#1}}}

[[plugins]]
repo = 'Shougo/context_filetype.vim'
#{{{1
on_source = 'neocomplete.vim'
#1}}}

# color

[[plugins]]
repo = 'w0ng/vim-hybrid'
#{{{1
hook_add = '''
colorscheme hybrid
'''
#1}}}

# status line

[[plugins]]
repo = 'itchyny/lightline.vim'
#{{{1
hook_add = '''
let g:lightline = {'colorscheme': 'wombat'}
'''
#1}}}

# operator

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-operator-replace'
#{{{1
depends = 'vim-operator-user'
hook_add = '''
nmap [MyPrefix]r <Plug>(operator-replace)
vmap [MyPrefix]r <Plug>(operator-replace)
nmap [MyPrefix]rr <Plug>(operator-replace)iw
'''
#1}}}

[[plugins]]
repo = 'emonkak/vim-operator-comment'
#{{{1
depends = 'vim-operator-user'
hook_add = '''
nmap [MyPrefix]x <Plug>(operator-comment)
nmap [MyPrefix]z <Plug>(operator-uncomment)
vmap [MyPrefix]x <Plug>(operator-comment)
vmap [MyPrefix]z <Plug>(operator-uncomment)
nmap [MyPrefix]xx <Plug>(operator-comment)l
nmap [MyPrefix]zz <Plug>(operator-uncomment)l
'''
#1}}}

# textobj

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-line'
#{{{1
depends = 'vim-textobj-user'
hook_add = '''
omap l <Plug>(textobj-line-a)
'''
#1}}}

[[plugins]]
repo = 'kana/vim-textobj-entire'
#{{{1
depends = 'vim-textobj-user'
#1}}}

[[plugins]]
repo = 'kana/vim-textobj-indent'
#{{{1
depends = 'vim-textobj-user'
#1}}}

[[plugins]]
repo = 'kana/vim-textobj-function'
#{{{1
depends = 'vim-textobj-user'
#1}}}
 
# grep

[[plugins]]
repo = 'mileszs/ack.vim'
#{{{1
on_cmd = ['Ag']
#1}}}

# undo

[[plugins]]
repo = 'sjl/gundo.vim'
#{{{1
on_cmd = ['GundoShow', 'GundoHide', 'GundoToggle', 'GundoRenderGraph']
#1}}}

# git

[[plugins]]
repo = 'tpope/vim-fugitive.git'
#{{{1
on_cmd = ['Gblame', 'Ggrep']
#1}}}

[[plugins]]
repo = 'airblade/vim-gitgutter'
 
# quickrun

[[plugins]]
repo = 'thinca/vim-quickrun.git'
#{{{1
on_map = {n = '<Plug>'}
hook_add = '''
map [MyPrefix]q <Nop>
map [MyPrefix]q <Plug>(quickrun)
'''
hook_post_source = '''
let g:quickrun_config = {}

let g:quickrun_config['*'] = {'split': 'below'}

let g:quickrun_config['markdown'] = {
  \ 'outputter' : 'null',
  \ 'command' : 'open',
  \ 'cmdopt' : '-a',
  \ 'args' : 'Marked\ 2',
  \ 'exec' : '%c %o %a %s',
  \ }
'''
#1}}}

# syntax check

[[plugins]]
repo = 'scrooloose/syntastic'
#{{{1
on_ft = ['swift', 'ruby', 'python', 'html', 'css', 'slim', 'json', 'javascript', 'markdown']
hook_post_source = '''
let g:syntastic_ruby_checkers = ['rubocop']
let g:syntastic_haml_checkers = ['haml_lint']
'''
#1}}}

[[plugins]]
repo = 'tokorom/syntastic-swiftlint.vim'
#{{{1
depends = 'syntastic'
on_ft = ['swift']
hook_post_source = '''
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_swift_checkers = ['swiftlint']
'''
#1}}}

[[plugins]]
repo = 'w0rp/ale'
#{{{1
on_ft = ['review']
hook_post_source = '''
let g:ale_linters_explicit = 1
let g:ale_linters = {
\   'review': ['redpen', 'prh'],
\}
" use the quickfix list instead of the loclist
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
" show Vim windows
let g:ale_open_list = 1
" don't wish to run linters while you type
let g:ale_lint_on_text_changed = 0
'''
#1}}}

[[plugins]]
repo = '$VIMLOCAL/ale-prh'
#{{{1
depends = 'ale'
on_ft = ['review']
#1}}}

# toml

[[plugins]]
repo = 'cespare/vim-toml'
#{{{1
on_ft = ['toml']
#1}}}

# grep

[[plugins]]
repo = 'mhinz/vim-grepper'
#{{{1
on_cmd = ['Grepper', 'GrepperAg']
hook_add = '''
nnoremap [MyPrefix]g :<C-u>Grepper -highlight<CR>
nnoremap <expr> [MyPrefix].g ':Grepper -highlight -query ' . expand('<cword>')
'''
#1}}}

# unite

[[plugins]]
repo = 'Shougo/unite.vim'
#{{{1
depends = 'neomru.vim'
on_cmd = ['Unite', 'UniteWithCursorWord', 'UniteWithInput']
hook_add = '''
nnoremap [MyPrefix].f :<C-u>Unite -start-insert buffer file_rec file/new<CR>
nnoremap [MyPrefix].b :<C-u>Unite -start-insert buffer<CR>
nnoremap [MyPrefix].r :<C-u>Unite -start-insert file_mru<CR>
nnoremap [MyPrefix].c :<C-u>Unite -start-insert codic<CR>
'''
hook_post_source = '''
let g:unite_update_time = 50

call unite#custom_source('file_rec', 'ignore_pattern', '\%(^\|/\)\%(build\|te?mp\)/\|\.\%(build\|git\)/\|\.\%(DS_Store\|o\|exe\|dll\|bak\|sw[po]\|class\|d\|dia\|gcda\|gcno\|png\|gif\|jpe?g\)$')

" use `ag` for grep
if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '--smart-case --nogroup --nocolor --column'
  let g:unite_source_grep_recursive_opt = ''
  let g:unite_source_grep_max_candidates = 0
endif

" close preview window
autocmd FileType unite call s:unite_settings()
function! s:unite_settings()
  nnoremap <silent><buffer><expr> c
        \ empty(filter(range(1, winnr('$')),
        \ 'getwinvar(v:val, "&previewwindow") != 0')) ?
        \ unite#do_action('preview') : ":\<C-u>pclose!\<CR>"
  nmap <silent><buffer> <Esc> <Plug>(unite_exit)
  nmap <silent><buffer> / i<Space>
  nmap <silent><buffer> <C-n> j
  nmap <silent><buffer> <C-p> k
  imap <silent><buffer> <C-l> <Esc>q
endfunction

" custom filters
let s:filters = {
    \   "name" : "converter_filepath_filename",
    \   "description" : "filepath to filename"
\}

function! s:filters.filter(candidates, context)
    for candidate in a:candidates
      let items = split(candidate.word, ':')
      let items[0] = fnamemodify(items[0], ':t')
      let candidate.word = join(items, ':')
    endfor
    return a:candidates
endfunction

call unite#define_filter(s:filters)
unlet s:filters

call unite#custom#source('grep', 'converters', ["converter_filepath_filename"])
'''
#1}}}

[[plugins]]
repo = 'Shougo/neomru.vim'
#{{{1
on_source = 'unite.vim'
#1}}}

# neocomplete

[[plugins]]
repo = 'Shougo/neocomplete.vim'
#{{{1
depends = 'context_filetype.vim'
if = "has('lua')"
on_func = 'neocomplete#'
hook_source = '''
let g:neocomplete#enable_at_startup = 1 "自動起動
inoremap <expr> <C-n> pumvisible() ? "\<C-n>" : neocomplete#start_manual_complete()
inoremap <expr> <C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr> <C-g> neocomplete#undo_completion()
imap <C-k> <Plug>(neocomplete_start_unite_complete)<Esc>A
'''
hook_post_source = '''
let g:neocomplete#disable_auto_complete = 1 "自動補完をしない
let g:neocomplete#auto_completion_start_length = 3 "自動補完開始は3文字打鍵した後
let g:neocomplete#enable_smart_case = 1 "大文字小文字無視
let g:neocomplete#max_list = 10000 "候補の最大数
let g:neocomplete#enable_auto_select = 0 "第一候補を自動選択しない
let g:neocomplete#enable_fuzzy_completion = 0 "Fuzzy補完しない

autocmd FileType vim,swift let g:neocomplete#disable_auto_complete = 0 "一部のfiletypeでは自動補完を有効にする

let g:neocomplete#sources#dictionary#dictionaries = {
  \ 'default' : ''
\ }

if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns._ = '\h\w*'
'''
#1}}}

[[plugins]]
repo = '$VIMLOCAL/unite-action-tabselect'
#{{{1
depends = 'unite.vim'
on_source = 'unite.vim'
hook_post_source = '''
call unite#custom#default_action('jump_list,file,buffer,openable', 'tabselect')
'''
#1}}}

# neosnippet

[[plugins]]
repo = 'Shougo/neosnippet'
#{{{1
depends = 'context_filetype.vim'
on_i = true
on_ft = 'snippet'
hook_source = '''
let g:neosnippet#disable_runtime_snippets = {'_': 1}
let g:neosnippet#snippets_directory = $VIMHOME.'/snippets'
let g:neosnippet#enable_snipmate_compatibility = 1

imap <expr><TAB> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)"
\ : neosnippet#jumpable() ? "\<Plug>(neosnippet_jump)"
\ : pumvisible() ? "\<CR>"
\ : "\<TAB>"
smap <expr><TAB> neosnippet#expandable() ? "\<Plug>(neosnippet_expand_or_jump)"
\ : neosnippet#jumpable() ? "\<Plug>(neosnippet_jump)"
\ : "\<TAB>"
imap <expr><M-Y> neosnippet#jumpable() ? "\<Plug>(neosnippet_jump)" : ""
smap <expr><M-Y> neosnippet#jumpable() ? "\<Plug>(neosnippet_jump)" : ""
imap <expr><Esc> neosnippet#jumpable() ?
\ "\<M-Y>\<M-Y>\<M-Y>\<M-Y>\<M-Y>\<M-Y>\<M-Y>\<M-Y>\<M-Y>\<M-Y>\<M-Y>\<Esc>" : "\<Esc>"
smap <expr><Esc> neosnippet#jumpable() ?
\ "\<M-Y>\<M-Y>\<M-Y>\<M-Y>\<M-Y>\<M-Y>\<M-Y>\<M-Y>\<M-Y>\<M-Y>\<M-Y>\<Esc>" : "\<Esc>"
'''
#1}}}

# Codic

[[plugins]]
repo = 'koron/codic-vim'
#{{{1
on_cmd = ['Codic']
on_source = 'unite-codic.vim'
#1}}}

[[plugins]]
repo = 'rhysd/unite-codic.vim'
#{{{1
depends = 'unite.vim'
on_source = 'unite.vim'
#1}}}

# ruby

[[plugins]]
repo = 'tpope/vim-rails.git'
#{{{1
on_ft = ['ruby']
#1}}}

[[plugins]]
repo = 'tpope/vim-haml.git'
#{{{1
on_ft = ['haml']
#1}}}

# markdown

[[plugins]]
repo = 'chrismetcalf/vim-markdown.git'
#{{{1
on_ft = ['markdown']
#1}}}

# review

[[plugins]]
repo = 'uplus/vim-review'
#{{{1
on_ft = ['review']
#1}}}

# swift

[[plugins]]
repo = 'apple/swift'
#{{{1
rtp = 'utils/vim'
on_ft = ['swift']
#1}}}

[[plugins]]
repo = 'tokorom/swift_gyb.vim'
#{{{1
on_ft = ['swift']
#1}}}

[[plugins]]
repo = 'tokorom/swift-dict.vim'
#{{{1
on_ft = ['swift']
hook_source = '''
let g:swift_dict_with_neocomplete = 1 "siwft-dictをneocomplete経由で利用する
'''
#1}}}

# json

[[plugins]]
repo = 'elzr/vim-json.git'
#{{{1
on_ft = ['json']
#1}}}

# html

[[plugins]]
repo = 'slim-template/vim-slim'
#{{{1
on_ft = ['slim']
#1}}}

# etc

[[plugins]]
repo = '$VIMLOCAL/urldecoder.vim'
#{{{1
on_cmd = ['URLEncode', 'URLDecode']
#1}}}
