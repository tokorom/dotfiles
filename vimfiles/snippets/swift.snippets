snippet header
	//
	//  ${1:`Filename()`}.swift
	//
	//  Created by ToKoRo on `strftime("%Y-%m-%d")`.
	//
snippet shell
	 #!/usr/bin/env xcrun swift -i
	
	 ${0}
snippet class
alias cl
	//
	//  ${1:`Filename()`}.swift
	//
	//  Created by ToKoRo on `strftime("%Y-%m-%d")`.
	//
	
	import ${3:UIKit}
	
	class $1${2} {
		${0}
	}
snippet protocol
alias pr
	// MARK: - ${1:`Filename()`}
	
	protocol $1${2} {
		${0}
	}
snippet extension
alias ext
	// MARK: - ${1:Extension}
	
	extension ${2:`Filename()`: }$1 {
		${0}
	}
snippet enum
	enum ${1:Name}${2} {
		case ${3:Label}
	}
snippet import
alias i im
	import ${1:UIKit}
snippet let
alias l
	let ${1:name} = ${2:val}
snippet ll
	let ${1:name}: ${2:Type} = ${3:value}
snippet var
alias v
	var ${1:name} = ${2:value}
snippet vv
	var ${1:name}: ${2:Type} = ${3:value}
snippet weak
alias vw
	weak var ${1:name}: ${2:type}?
snippet struct
alias st
	struct ${1:name} {
		var ${2:\#:variant = 0}
	}
snippet init
	init(${1:\#:parameters}) {
		${0}
	}
snippet convenience_init
alias conini
	convenience init(${1:\#:parameters}) {
		${0}
	}
snippet deinit
	deinit {
		${0}
	}
snippet func
alias f
	func ${1:something}(${2:\#:parameters}) ${3:\#:-> Int }{
		${0}
	}
snippet override
alias ov
	override func ${1:something}(${2:\#:parameters}) ${3:\#:-> Int }{
		${0}
	}
snippet closure
alias cl
	{ (${1:\#:parameters}) -> ${2:\#:return type} in
		${0}
	}
snippet if
	if ${1:true} {
		${0}
	}
snippet ifl
	if let ${1:let} = ${2:true} {
		${0}
	}
snippet for
	for ${1:_} in ${2:\#:list} {
		${0}
	}
snippet fori
	for var ${1:index} = 0; $1 < ${2:\#:max}; ++$1 {
		${0}
	}
snippet while
	while ${1:true} {
		${0}
	}
snippet switch
	switch ${1:val} {
	case ${2:definition}:
		${0}
	default:
	}
snippet where
	switch ${1:tupple} {
	case let ${2:(x, y)} where ${3:x == y}:
		${0}
	}
snippet alert
	let alert = UIAlertView()
	alert.message = "hello"
	alert.addButtonWithTitle("OK")
	alert.show()
snippet #pm
	// MARK: - ${1:`Filename()`}
snippet #pmpm
	// MARK: - Private Methods
snippet #pmpu
	// MARK: - Public Interface
snippet #pmli
	// MARK: - Lifecycle
snippet #pmac
	// MARK: - Actions
snippet #pmpr
	// MARK: - Properties
snippet print
alias log
	println("${1}");
snippet \
	\(${1})${0}
snippet ibaction
alias action act
	@IBAction func ${1:action}(sender: ${2:AnyObject}) {
		${0}
	}
snippet iboutlet
alias ib
	@IBOutlet weak var ${1:label}: ${2:UILabel}?
snippet property
alias prop
	var ${1:string}: ${2:String}
snippet propw
	weak var ${1:string}: ${2:String}
snippet propr
	var ${1:string}: ${2:String} { get }
snippet propl
alias lazy
	lazy var ${1:string} = ${2}
snippet propg
alias get
	var ${1:string} {
		return ${0}
	}
snippet lstr
	NSLocalizedString("${1:key}", comment: "${2}")
snippet viewDidLoad
	override func viewDidLoad() {
		super.viewDidLoad()
	
		${0}
	}
snippet viewWillAppear
	override func viewWillAppear(animated: Bool) {
		super.viewWillAppear(animated)
	
		${0}
	}
snippet viewDidAppear
	override func viewDidAppear(animated: Bool) {
		super.viewDidAppear(animated)
	
		${0}
	}
snippet viewWillDisappear
	override func viewWillDisappear(animated: Bool) {
		super.viewWillDisappear(animated)
	
		${0}
	}
snippet viewDidDisappear
	override func viewDidDisappear(animated: Bool) {
		super.viewDidDisappear(animated)
	
		${0}
	}
snippet viewWillLayoutSubviews
	override func viewWillLayoutSubviews() {
		super.viewWillLayoutSubviews()
	
		${0}
	}
snippet viewDidLayoutSubviews
	override func viewDidLayoutSubviews() {
		super.viewDidLayoutSubviews()
	
		${0}
	}
snippet UITableViewDelegate
	// MARK: - UITableViewDelegate
	
	extension ${1:`Filename()`}: UITableViewDelegate {
	
		func tableView(tableView: UITableView!, didSelectRowAtIndexPath indexPath: NSIndexPath!) {
		}
	
	}
snippet UITableViewDataSource
	// MARK: - UITableViewDataSource
	
	extension ${1:`Filename()`}: UITableViewDataSource {
	
		func tableView(tableView: UITableView!, section: Int) -> Int {
		}
	
		func tableView(tableView: UITableView!, indexPath: NSIndexPath!) -> UITableViewCell! {
		}
	
	}
