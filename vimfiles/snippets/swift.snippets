snippet header
	//
	//  ${1:`Filename()`}.swift
	//
	//  Created by ToKoRo on `strftime("%Y-%m-%d")`.
	//
snippet shell
alias commandline
alias cli
	 #!/usr/bin/env xcrun swift
	 // vim: ft=swift
	
	 ${0}
snippet class
alias cl
	//
	//  ${1:`Filename()`}.swift
	//
	//  Created by ToKoRo on `strftime("%Y-%m-%d")`.
	//
	
	import ${3:UIKit}
	
	class $1${2} {
		${0}
	}
snippet protocol
alias pr
	// MARK: - ${1:`Filename()`}
	
	protocol $1${2} {
		${0}
	}
snippet extension
alias ext
	// MARK: - ${1:Extension}
	
	extension ${2:`Filename()`: }$1 {
		${0}
	}
snippet enum
	enum ${1:Name}${2} {
		case ${3:Label}
	}
snippet import
alias i im
	import ${1:UIKit}
snippet let
alias l
	let ${1:name} = ${2:val}
snippet ll
	let ${1:name}: ${2:Type} = ${3:value}
snippet var
alias v
	var ${1:name} = ${2:value}
snippet vv
	var ${1:name}: ${2:Type} = ${3:value}
snippet weak
alias vw
	weak var ${1:name}: ${2:type}?
snippet struct
alias st
	struct ${1:name} {
		var ${2:\#:variant = 0}
	}
snippet init
	init(${1:\#:parameters}) {
		${0}
	}
snippet convenience_init
alias conini
	convenience init(${1:\#:parameters}) {
		${0}
	}
snippet deinit
	deinit {
		${0}
	}
snippet func
alias f
	func ${1:something}(${2:\#:parameters}) ${3:\#:-> Int }{
		${0}
	}
snippet override
alias ov
	override func ${1:something}(${2:\#:parameters}) ${3:\#:-> Int }{
		${0}
	}
snippet closure
alias cl
	{ (${1:\#:parameters}) -> ${2:\#:return type} in
		${0}
	}
snippet if
	if ${1:true} {
		${0}
	}
snippet ifl
	if let ${1:let} = ${2:true} {
		${0}
	}
snippet ifcase
alias ifc
	if case let (${1:_}, ${2:value as Int}) = ${3:dicts} {
		${0}
	}
snippet gl
	guard let ${1:name} = ${2:name} else {
		return ${3:nil}
	}
	${0}
snippet glself
alias gls
	guard let wself = self else {
		return
	}
	${0}
snippet glcase
alias glc
	guard case let (${1:_}, ${2:value as Int}) = ${3:dicts} else {
		return
	}
snippet for
	for ${1:_} in ${2:\#:list} {
		${0}
	}
snippet fori
	for ${1:index} in 0..<${2:count} {
		${0}
	}
snippet forcase
alias forc
	for case let (${1:_}, ${2:value as Int}) in ${3:dicts} {
		${0}
	}
snippet while
	while ${1:true} {
		${0}
	}
snippet switch
	switch ${1:val} {
	case ${2:definition}:
		${0}
	default:
	}
snippet where
	switch ${1:tupple} {
	case let ${2:(x, y)} where ${3:x == y}:
		${0}
	}
snippet alert
	let alert = UIAlertView()
	alert.message = "hello"
	alert.addButtonWithTitle("OK")
	alert.show()
snippet #pm
	// MARK: - ${1:`Filename()`}
snippet #pmpm
	// MARK: - Private Methods
snippet #pmpu
	// MARK: - Public Interface
snippet #pmli
	// MARK: - Lifecycle
snippet #pmac
	// MARK: - Actions
snippet #pmpr
	// MARK: - Properties
snippet log
	NSLog("${1}")
snippet print
	println("${1}")
snippet \
	\(${1})${0}
snippet ibaction
alias action act
	@IBAction func ${1:action}(sender: ${2:AnyObject}) {
		${0}
	}
snippet iboutlet
alias ib
	@IBOutlet weak var ${1:label}: ${2:UILabel}?
snippet property
alias prop
	var ${1:string}: ${2:String}
snippet propw
	weak var ${1:string}: ${2:String}
snippet propr
	var ${1:string}: ${2:String} { get }
snippet propl
alias lazy
	lazy var ${1:string} = ${2}
snippet propg
alias get
	var ${1:string} {
		return ${0}
	}
snippet ibinspectable
	@IBInspectable
snippet ibdesignable
	@IBDesignable
snippet lstr
	NSLocalizedString("${1:key}", comment: "${2}")
snippet viewDidLoad
	override func viewDidLoad() {
		super.viewDidLoad()
	
		${0}
	}
snippet viewWillAppear
	override func viewWillAppear(animated: Bool) {
		super.viewWillAppear(animated)
	
		${0}
	}
snippet viewDidAppear
	override func viewDidAppear(animated: Bool) {
		super.viewDidAppear(animated)
	
		${0}
	}
snippet viewWillDisappear
	override func viewWillDisappear(animated: Bool) {
		super.viewWillDisappear(animated)
	
		${0}
	}
snippet viewDidDisappear
	override func viewDidDisappear(animated: Bool) {
		super.viewDidDisappear(animated)
	
		${0}
	}
snippet viewWillLayoutSubviews
	override func viewWillLayoutSubviews() {
		super.viewWillLayoutSubviews()
	
		${0}
	}
snippet viewDidLayoutSubviews
	override func viewDidLayoutSubviews() {
		super.viewDidLayoutSubviews()
	
		${0}
	}
snippet UITableViewDelegate
alias tableviewdelegate
	// MARK: - UITableViewDelegate
	
	extension ${1:`Filename()`}: UITableViewDelegate {
	
		func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
		}
	
	}
snippet UITableViewDataSource
alias tableviewdatasource
	// MARK: - UITableViewDataSource
	
	extension ${1:`Filename()`}: UITableViewDataSource {
	
		func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
		}
	
		func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {
		}
	
	}
snippet numberOfSectionsInTableView
	func numberOfSectionsInTableView(tableView: UITableView) -> Int {
		${0}
	}
snippet titleForHeaderInSection
	func tableView(tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
		${0}
	}
snippet viewForHeaderInSection
alias tableViewDelegate_viewForHeaderInSection
	func tableView(tableView: UITableView, viewForHeaderInSection section: Int) -> UIView {
		${0}
	}
snippet heightForHeaderInSection
alias tableViewDelegate_heightForHeaderInSection
	func tableView(tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
		${0}
	}
snippet heightForRowAtIndexPath
alias tableViewDelegate_heightForRowAtIndexPath
	func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat {
		${0}
	}
snippet estimatedHeightForRowAtIndexPath
alias tableViewDelegate_estimatedHeightForRowAtIndexPath
	func tableView(tableView: UITableView, estimatedHeightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat {
		${0}
	}
snippet dispatch_after
	DispatchQueue.main.asyncAfter(deadline: .now() + ${1:5}) {
		${0}
	}
snippet dispatch_after_old
	dispatch_after(dispatch_time(DISPATCH_TIME_NOW, Int64(${1:10} * Double(NSEC_PER_SEC))), dispatch_get_main_queue()) {
		${0}
	}
snippet dispatch_async_global
alias global_queue
alias async
	dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)) {
		${0}
	}
snippet dispatch_async_main
alias main_queue
	DispatchQueue.main.async {
		${0}
	}
snippet dispatch_async_main_old
alias main_queue_old
	dispatch_async(dispatch_get_main_queue()) {
		${0}
	}
snippet quick
	//
	//  ${1:`Filename()`}.swift
	//
	//  Created by ToKoRo on `strftime("%Y-%m-%d")`.
	//
	
	import Quick
	import Nimble
	
	class $1: QuickSpec {
		override func spec() {
	
			describe("$1") {
				it("${2:can be created}") {
					let subject = $1()
					expect(subject).toNot(beNil())
				}
			}
	
		}
	
	}
snippet awakeFromNib
	override func awakeFromNib() {
		super.awakeFromNib()
		
		${0}
	}
snippet layoutSubviews
	override func layoutSubviews() {
		super.layoutSubviews()
		
		${0}
	}
snippet singleton
alias sharedInstance
	static let sharedInstance = ${1:`Filename()`}()${0}
snippet promise_function
	func ${1:requestXXX}() -> Promise<${2:Int}> {
		let promise = Promise<$2>({ fulfiller, rejecter in
			self.client.GET("/partners/today").then { (res: APIResponse) -> Void in
				fulfiller(0)
			}.catch { (error: NSError) -> Void in
				rejecter(error)
			}.finally {
			}
			return
		})
		return promise
	}
snippet task
	func ${1:requestXXX}() -> Task<Progress, ${2:Int}, NSError> {
		let task = Task<Progress, $2, NSError> { progress, fulfill, reject, configure in
			if success {
				fulfill(0)
			} else {
				reject(error)
			}
		}
		return task
	}
snippet static_struct
	struct Static {
		static var targets = [Any]()${0}
	}
snippet unwind_segue
	@IBAction func ${1:unwindToHere}(segue: UIStoryboardSegue) {
		${0}
	}
snippet animateWithDuration
	UIView.animateWithDuration(0.25, animations: { () in
		${0}
	})
snippet animateWithDuration_with_completion
	UIView.animateWithDuration(0.25, delay: 0.0, options: .CurveEaseInOut, animations: { () in
		${0}
	}, completion: { (stopped: Bool) in
		if (stopped) {
		}
	})
snippet available_if
alias available ifa
	if #available(${1:iOS 9.0}, *) {
		${0}
	}
snippet available_annotation
alias aa
	@available(${1:iOS 9.0}, *)${0}
snippet subscript_int
	subscript(index: Int) -> ${1:Int} {
		get {
			${0}
		}
		set {
		}
	}
snippet subscript_any
	subscript(index: ${1:String}) -> ${2:Any} {
		get {
			${0}
		}
		set {
		}
	}
snippet notimplemented
	fatalError("\(#function) is not implemented")
snippet assert
alias xct
	XCTAssert(${1})${0}
snippet assertequal
alias xctassertequal
	XCTAssertEqual(${1}, ${2})${0}
snippet assertequalwithaccuracy
alias xctassertequalwithaccuracy
	XCTAssertEqualWithAccuracy(${1}, ${2})${0}
snippet assertfalse
alias xctassertfalse
	XCTAssertFalse(${1})${0}
snippet assertgreaterthan
alias xctassertgreaterthan
	XCTAssertGreaterThan(${1}, ${2})${0}
snippet assertgreaterthanorequal
alias xctassertgreaterthanorequal
	XCTAssertGreaterThanOrEqual(${1}, ${2})${0}
snippet assertlessthan
alias xctassertlessthan
	XCTAssertLessThan(${1}, ${2})${0}
snippet assertlessthanorequal
alias xctassertlessthanorequal
	XCTAssertLessThanOrEqual(${1}, ${2})${0}
snippet assertnil
alias xctassertnil
	XCTAssertNil(${1})${0}
snippet assertnotequal
alias xctassertnotequal
	XCTAssertNotEqual(${1}, ${2})${0}
snippet assertnotequalwithaccuracy
alias xctassertnotequalwithaccuracy
	XCTAssertNotEqualWithAccuracy(${1}, ${2})${0}
snippet assertnotnil
alias xctassertnotnil
	XCTAssertNotNil(${1})${0}
snippet asserthrowserror
alias xctasserthrowserror
	XCTAssertThrowsError(${1})${0}
snippet asserttrue
alias xctasserttrue
	XCTAssertTrue(${1})${0}
snippet assertfail
alias xctassertfail
	XCTFail(${1})${0}
snippet wself
	[weak self] in${0}
